package ctxdata

import (
	"time"
)

// Code generated by generate-helpers.fish; DO NOT EDIT.

// GetString return the value of key as a string.
// If key is not set, or its value is not a string,
// then GetString returns defaultValue.
func (d *Data) GetString(key string, defaultValue string) string {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(string)
	if !ok {
		return defaultValue
	}

	return res
}

// GetInt return the value of key as a int.
// If key is not set, or its value is not a int,
// then GetInt returns defaultValue.
func (d *Data) GetInt(key string, defaultValue int) int {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(int)
	if !ok {
		return defaultValue
	}

	return res
}

// GetInt64 return the value of key as a int64.
// If key is not set, or its value is not a int64,
// then GetInt64 returns defaultValue.
func (d *Data) GetInt64(key string, defaultValue int64) int64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(int64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetUint64 return the value of key as a uint64.
// If key is not set, or its value is not a uint64,
// then GetUint64 returns defaultValue.
func (d *Data) GetUint64(key string, defaultValue uint64) uint64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(uint64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetFloat64 return the value of key as a float64.
// If key is not set, or its value is not a float64,
// then GetFloat64 returns defaultValue.
func (d *Data) GetFloat64(key string, defaultValue float64) float64 {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(float64)
	if !ok {
		return defaultValue
	}

	return res
}

// GetBool return the value of key as a bool.
// If key is not set, or its value is not a bool,
// then GetBool returns defaultValue.
func (d *Data) GetBool(key string, defaultValue bool) bool {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(bool)
	if !ok {
		return defaultValue
	}

	return res
}

// GetDuration return the value of key as a time.Duration.
// If key is not set, or its value is not a time.Duration,
// then GetDuration returns defaultValue.
func (d *Data) GetDuration(key string, defaultValue time.Duration) time.Duration {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(time.Duration)
	if !ok {
		return defaultValue
	}

	return res
}

// GetTime return the value of key as a time.Time.
// If key is not set, or its value is not a time.Time,
// then GetTime returns defaultValue.
func (d *Data) GetTime(key string, defaultValue time.Time) time.Time {
	val, err := d.Get(key)
	if err != nil {
		return defaultValue
	}

	res, ok := val.(time.Time)
	if !ok {
		return defaultValue
	}

	return res
}
